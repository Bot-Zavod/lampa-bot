from telegram import LabeledPrice, InlineKeyboardMarkup, InlineKeyboardButton, ParseMode, ReplyKeyboardRemove
from telegram.ext import ConversationHandler
import logging
from requests import get

from .states import States
from spreadsheet import *
from db import *
from .constants import *

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

logger = logging.getLogger(__name__)

# terms or why we are not going to return money
def terms(update, context):
	text = "1. –î–µ–Ω—é–∂–∫–∏ –º—ã –Ω–µ –≤–µ—Ä–Ω–µ–º, —É–∂ –ø—Ä–æ—Å—Ç–∏.\n2. –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç—É–µ—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤"
	update.message.reply_text(text=text)
	logger.info("User %s: ask Terms;", update.message.chat.id)

# ask dickhead to pay or die
def noSubscription(update, context):
	chat_id = update.message.chat.id

	text = "–ö–∞–∂–µ—Ç—Å—è.. –°–µ–≥–æ–¥–Ω—è –≤—Å–µ lampa-—Ç–µ—Å—Ç—ã —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω—ã üòû"
	context.bot.send_message(chat_id=chat_id, text=text, reply_markup=ReplyKeyboardRemove())

	text = "–¢—ã –º–æ–∂–µ—à—å –ø–æ–±–æ–ª—Ç–∞—Ç—å —Å –∫–µ–º-—Ç–æ –µ—â–µ, –∫—É–ø–∏–≤ lampa-–ø–æ–¥–ø–∏—Å–∫—É"
	day = InlineKeyboardButton(text="3 –¥–Ω—è", callback_data="3days")
	week = InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data="week")
	month = InlineKeyboardButton(text="–ú–µ—Å—è—Ü", callback_data="month")
	no_sps = InlineKeyboardButton(text="–ù–µ —Å–µ–π—á–∞—Å", callback_data="no_sps")
	reply_markup = InlineKeyboardMarkup([[day],[week],[month],[no_sps]])

	context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)

	logger.info("User %s: try to subscribe;", chat_id)
	return States.SUB


def no_sps(update, context):
	chat_id = update.callback_query.message.chat.id
	message_id = update.callback_query.message.message_id
	context.bot.delete_message(chat_id, message_id)
	
	text = '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º, –ø–æ—á–µ–º—É –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –ë–æ—Ç–∞ –ø–æ –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ? üôÑ'
	b1 = InlineKeyboardButton(text="–°–µ—Ä–≤–∏—Å –º–Ω–µ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω", callback_data="reason1")
	b2 = InlineKeyboardButton(text="–ú–µ–Ω—è –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ü–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="reason2")
	b3 = InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ...", callback_data="other")
	reply_markup = InlineKeyboardMarkup([[b1],[b2],[b3]])
	context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)

	logger.info("User %s: refused to subscribe;", chat_id)
	return States.SUB_REFUSAL

# why user do not want to pay
def other(update, context):
	chat_id = update.callback_query.message.chat.id
	message_id = update.callback_query.message.message_id
	context.bot.delete_message(chat_id, message_id)

	# –ß—Ç–æ –Ω–∞–∂–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ no_sps
	data = update.callback_query.data
	
	# –ü—Ä–æ—Å–∏–º –ø–æ—è—Å–Ω–∏—Ç—å –∑–∞ –±–∞–∑–∞—Ä
	if data == 'other':
		text = '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ—á–µ–º—É?'
		context.bot.send_message(chat_id=chat_id, text=text)
		logger.info("User %s: take other;", chat_id)
		return States.SUB_REFUSAL_EXPLAINED

	# –ü–æ–Ω—è—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ reason1 or reason2
	else:
		logger.info("User %s: take 1-2 reason;", chat_id)
		payment_refused(data)

		# –¢—É—Ç –Ω–∞–¥–æ —Ç–∞–∫, –∏–±–æ update —Å–ø–µ—Ü–µ—Ñ–∏—á–µ—Å–∫–∏–π
		return sps_buy(update.callback_query, context)

# –ö–æ–Ω–µ—Ü –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ "–ü–æ—è—Å–Ω–µ–Ω–∏–µ –∑–∞ –±–∞–∑–∞—Ä!)"
def sps_buy(update, context):
	reason = update.message.text
	payment_refused(reason)
	
	reply_markup=ReplyKeyboardMarkup(keyboard=start_kb, resize_keyboard=True)
	text = '–°–ø–∞—Å–∏–±–æ, –¥—Ä—É–≥!) –Ø –≤—Å–µ–≥–¥–∞ —Ç–µ–±–µ —Ä–∞–¥, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –±—É–¥–µ—Ç –≥—Ä—É—Å—Ç–Ω–æ –∏ –∑–∞—Ö–æ—á–µ—Ç—Å—è —Å –∫–µ–º-—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å üôÇ'
	update.message.reply_text(text=text, reply_markup=reply_markup)
	logger.info("User %s: subscribed;", update.message.chat.id)
	return ConversationHandler.END

# sendInvoice
def pay(update, context):
	update = update.callback_query
	currency = int(round(get('https://api.exchangeratesapi.io/latest?symbols=USD,RUB').json()['rates']['RUB']))
	description = {
		'3days':['–ë—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 3—Ö –¥–Ω–µ–π ü¶Ä', LabeledPrice("Subscribe on 3 days", 100*currency)], 
		'week':['–ë—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ üêü', LabeledPrice("Subscribe on week", 200*currency)],
		'month':['–ë—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ üê¨', LabeledPrice("Subscribe on month", 400*currency)]}
	context.bot.send_invoice(
		chat_id=update.message.chat.id, 
		title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞",
		description=description[update.data][0],
		payload=update.data,
		start_parameter=update.data,
		provider_token="381764678:TEST:16213",
		currency="RUB",
		need_email=True,
		prices=[description[update.data][1]])
	logger.info("User %s: get Invoice on %s;", update.message.chat.id, update.data)

# –ò —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–∫–∏
def precheckout_callback(update, context):
    query = update.pre_checkout_query
    chat_id = update.effective_user.id
    payment_id = query.id
    email =  query.order_info.email
    term = query.invoice_payload

    if query.invoice_payload not in ['3days','week','month']:
        query.answer(ok=False, error_message="Smthn went wrong ...")
    else:    	
    	DB.newSubscriber(chat_id, term)
    	DB.createNewPayment(payment_id, chat_id, email, term)
    	query.answer(ok=True)

# –≠—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–∫–∏
def successful_payment_callback(update, context):
	reply_markup=ReplyKeyboardMarkup(keyboard=start_kb, resize_keyboard=True)
	update.message.reply_text("–ö–∞–∫ —Ö–æ—Ä–æ—à–æ, —á—Ç–æ —Ç—ã –∑–¥–µ—Å—å!) –£–∑–Ω–∞–µ–º —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?ü¶Ñ", reply_markup=reply_markup)
	logger.info("User %s: subscribed", update.message.chat.id)

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ö—ç–Ω–¥–ª–µ—Ä–∞, –∞–ª—è –æ—Ç–º–µ–Ω—ã
def cancel(update, context):
	text = '–ì–æ—Ç–æ–≤–æ!'
	update.message.reply_text(text=text)
	logger.info("User %s: cancel;", update.message.chat.id)