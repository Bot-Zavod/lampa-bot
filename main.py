from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, PreCheckoutQueryHandler, CallbackQueryHandler, ConversationHandler
from telegram import LabeledPrice, InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
import logging
from requests import get

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

USERS = {}


def start(update, context):
	try:
		a = USERS[update.message.chat.id]
	except Exception as e:
		USERS[update.message.chat.id] = {'sub': False, 'trial': 3}

	text = '–ú—ã —Ä–∞–¥—ã —Ç–µ–±–µ. )\n–ü—Ä–æ–π–¥–∏ lampa-—Ç–µ—Å—Ç, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–≤–æ–π current mood (–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ) üôÇ'
	reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç!", callback_data="test")]])
	update.message.reply_text(text=text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
	logger.info("User %s: send /start;", update.message.chat.id)

def getFruit(update, context):
	chat_id = update.callback_query.message.chat.id
	# to db methods
	user_sub—Åribe = USERS[chat_id]['sub'] #checkUserApply()
	user_trial = USERS[chat_id]['trial'] #checkFreePass()

	if user_sub—Åribe == True:
		text = '–ö–∞–∫–æ–π —Ç—ã —Å–µ–π—á–∞—Å —Ñ—Ä—É–∫—Ç?'
	elif 0 < user_trial <= 3: #change on True or False
		text = '–ö–∞–∫–æ–π —Ç—ã —Å–µ–π—á–∞—Å —Ñ—Ä—É–∫—Ç? ('+str(USERS[chat_id]['trial'])+' left)'

		# –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å Pass
		USERS[chat_id]['trial'] -= 1
	else:
		text = "–ö–∞–∂–µ—Ç—Å—è.. –°–µ–≥–æ–¥–Ω—è –≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ lampa-—Ç–µ—Å—Ç—ã —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω—ã üòû –¢—ã –º–æ–∂–µ—à—å –ø–æ–±–æ–ª—Ç–∞—Ç—å —Å –∫–µ–º-—Ç–æ –µ—â–µ, –∫—É–ø–∏–≤ lampa-–ø–æ–¥–ø–∏—Å–∫—É /subscribe"
		day = InlineKeyboardButton(text="3 –¥–Ω—è", callback_data="3days")
		week = InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data="week")
		month = InlineKeyboardButton(text="–ú–µ—Å—è—Ü", callback_data="month")
		no_sps = InlineKeyboardButton(text="–ù–µ —Å–µ–π—á–∞—Å", callback_data="no_sps")
		reply_markup = InlineKeyboardMarkup([[day],[week],[month],[no_sps]])

		context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)
		return False

	context.bot.send_message(chat_id=chat_id, text=text)
	logger.info("User %s: chose FRUIT;", chat_id)

def no_sps(update, context):
	chat_id = update.callback_query.message.chat.id
	message_id = update.callback_query.message.message_id
	context.bot.delete_message(chat_id, message_id)
	
	text = '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º, –ø–æ—á–µ–º—É –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –ë–æ—Ç–∞ –ø–æ –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ? üôÑ'
	b1 = InlineKeyboardButton(text="–°–µ—Ä–≤–∏—Å –º–Ω–µ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω", callback_data="reason1")
	b2 = InlineKeyboardButton(text="–ú–µ–Ω—è –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ü–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="reason2")
	b3 = InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ...", callback_data="other")
	reply_markup = InlineKeyboardMarkup([[b1],[b2],[b3]])
	context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)
	logger.info("User %s: refused to subscribe;", chat_id)
	return 1

def other(update, context):
	chat_id = update.callback_query.message.chat.id
	message_id = update.callback_query.message.message_id
	data = update.callback_query.data
	context.bot.delete_message(chat_id, message_id)
	if data == 'other':
		text = '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ—á–µ–º—É?'
		context.bot.send_message(chat_id=chat_id, text=text)
		logger.info("User %s: take other;", chat_id)
		return 2
	else:
		logger.info("User %s: take 1-2 reason;", chat_id)
		return sps_buy(update.callback_query, context)
		

def sps_buy(update, context):
	text = '–°–ø–∞—Å–∏–±–æ, –¥—Ä—É–≥!) –Ø –≤—Å–µ–≥–¥–∞ —Ç–µ–±–µ —Ä–∞–¥, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –±—É–¥–µ—Ç –≥—Ä—É—Å—Ç–Ω–æ –∏ –∑–∞—Ö–æ—á–µ—Ç—Å—è —Å –∫–µ–º-—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å üôÇ'
	update.message.reply_text(text=text)
	logger.info("User %s: subscribed;", update.message.chat.id)
	return ConversationHandler.END

def cancel(update, context):
	text = '–ì–æ—Ç–æ–≤–æ!'
	update.message.reply_text(text=text)
	logger.info("User %s: cancel;", update.message.chat.id)


def subscribe(update, context):
	text = "–ù–∞ —Å–∫–æ–ª—å–∫–æ —Ç—ã —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É? üôà ?\n–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å /terms"
	day = InlineKeyboardButton(text="3 –¥–Ω—è", callback_data="3days")
	week = InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data="week")
	month = InlineKeyboardButton(text="–ú–µ—Å—è—Ü", callback_data="month")
	not_now = InlineKeyboardButton(text="–ù–µ —Å–µ–π—á–∞—Å", callback_data="not_now")
	reply_markup = InlineKeyboardMarkup([[day],[week],[month],[not_now]])
	update.message.reply_text(text=text, reply_markup=reply_markup)
	logger.info("User %s: try to subscribe;", update.message.chat.id)

def not_now(update, context):
	chat_id = update.callback_query.message.chat_id
	message_id = update.callback_query.message.message_id
	context.bot.delete_message(chat_id, message_id)
	logger.info("User %s: refused;", chat_id)
	return start(update.callback_query, context)

def terms(update, context):
	text = "1. –î–µ–Ω—é–∂–∫–∏ –º—ã –Ω–µ –≤–µ—Ä–Ω–µ–º, —É–∂ –ø—Ä–æ—Å—Ç–∏.\n2. –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç—É–µ—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤"
	update.message.reply_text(text=text)
	logger.info("User %s: ask Terms;", update.message.chat.id)

def pay(update, context):
	update = update.callback_query
	currency = int(round(get('https://api.exchangeratesapi.io/latest?symbols=USD,RUB').json()['rates']['RUB']))
	description = {
		'3days':['–ë—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 3—Ö –¥–Ω–µ–π ü¶Ä', LabeledPrice("Subscribe on 3 days", 100*currency)], 
		'week':['–ë—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ üêü', LabeledPrice("Subscribe on week", 200*currency)],
		'month':['–ë—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ üê¨', LabeledPrice("Subscribe on month", 400*currency)]}
	context.bot.send_invoice(
		chat_id=update.message.chat.id, 
		title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞",
		description=description[update.data][0],
		payload=update.data,
		start_parameter=update.data,
		provider_token="381764678:TEST:15778",
		currency="RUB",
		prices=[description[update.data][1]])
	logger.info("User %s: get Invoice on %s;", update.message.chat.id, update.data)


def successful_payment_callback(update, context):
	#–¢—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –±–∞–∑—É newSubscribe()
	USERS[update.message.chat.id]['sub'] = True
	update.message.reply_text("–ö–∞–∫ —Ö–æ—Ä–æ—à–æ, —á—Ç–æ —Ç—ã –∑–¥–µ—Å—å!) –£–∑–Ω–∞–µ–º —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?ü¶Ñ")
	logger.info("User %s: subscribed", update.message.chat.id)


def precheckout_callback(update, context):
    query = update.pre_checkout_query
    if query.invoice_payload not in ['3days','week','month']:
        query.answer(ok=False, error_message="Smthn went wrong ...")
    else:    	
        query.answer(ok=True)



if __name__ == '__main__':
	updater = Updater(token='728358108:AAEd0cC2S2LW8HvBSuFbQP0EoA-jWJ5XyUQ', use_context=True)
	dispatcher = updater.dispatcher

	dispatcher.add_handler(CommandHandler('start', start))
	dispatcher.add_handler(CommandHandler('subscribe', subscribe))
	# dispatcher.add_handler(CallbackQueryHandler(subscribe, pattern='^(subscribe)$'))
	dispatcher.add_handler(CommandHandler('terms', terms))
	dispatcher.add_handler(CallbackQueryHandler(not_now, pattern='^(not_now)$'))
	dispatcher.add_handler(CallbackQueryHandler(getFruit, pattern='^(test)$'))
	dispatcher.add_handler(CallbackQueryHandler(pay, pattern='^(3days|week|month)$'))
	dispatcher.add_handler(PreCheckoutQueryHandler(precheckout_callback))
	dispatcher.add_handler(MessageHandler(Filters.successful_payment, successful_payment_callback))

	dispatcher.add_handler(ConversationHandler(
		per_message=False,
        entry_points=[CallbackQueryHandler(no_sps, pattern='^(no_sps)$')],
        states={
            1: [CallbackQueryHandler(other, pattern='^(other|reason1|reason2)$')],
            2: [MessageHandler(Filters.text, sps_buy)],
        },
        fallbacks=[CommandHandler('cancel', cancel),
        ]
    ))


	updater.start_polling()
	updater.idle()